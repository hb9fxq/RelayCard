<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommandLine</name>
    </assembly>
    <members>
        <member name="T:CommandLine.BaseOptionAttribute">
            <summary>
            Provides base properties for creating an attribute, used to define rules for command line parsing.
            </summary>
        </member>
        <member name="M:CommandLine.BaseOptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Create an instance of <see cref="T:CommandLine.BaseOptionAttribute"/> derived class, validating <paramref name="shortName"/>
            and <paramref name="longName"/>.
            </summary>
            <param name="shortName">Short name of the option.</param>
            <param name="longName">Long name of the option.</param>
        </member>
        <member name="M:CommandLine.BaseOptionAttribute.#ctor(System.Nullable{System.Char},System.String)">
            <summary>
            Create an instance of <see cref="T:CommandLine.BaseOptionAttribute"/> derived class, validating <paramref name="shortName"/>
            and <paramref name="longName"/>. This constructor accepts a nullable character as short name.
            </summary>
            <param name="shortName">Short name of the option.</param>
            <param name="longName">Long name of the option.</param>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.ShortName">
            <summary>
            Short name of this command line option. You can use only one character.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.LongName">
            <summary>
            Long name of this command line option. This name is usually a single english word.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.MutuallyExclusiveSet">
            <summary>
            Gets or sets the option's mutually exclusive set.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.Required">
            <summary>
            True if this command line option is required.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.DefaultValue">
            <summary>
            Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.MetaValue">
            <summary>
            Gets or sets mapped property meta value.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.HelpText">
            <summary>
            A short description of this command line option. Usually a sentence summary. 
            </summary>
        </member>
        <member name="T:CommandLine.OptionAttribute">
            <summary>
            Models an option specification.
            </summary>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option..</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.OptionAttribute.CreateOptionInfo">
            <summary>
            Helper factory method for testing purpose.
            </summary>
        </member>
        <member name="T:CommandLine.OptionArrayAttribute">
            <summary>
            Models an option that can accept multiple values as separated arguments.
            </summary>
        </member>
        <member name="M:CommandLine.OptionArrayAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionArrayAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
        </member>
        <member name="M:CommandLine.OptionArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionArrayAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:CommandLine.OptionArrayAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionArrayAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="T:CommandLine.HelpOptionAttribute">
            <summary>
            Indicates the instance method that must be invoked when it becomes necessary show your help screen.
            The method signature is an instance method with no parameters and <see cref="T:System.String"/>
            return value.
            </summary>
        </member>
        <member name="M:CommandLine.HelpOptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpOptionAttribute"/> class.
            Although it is possible, it is strongly discouraged redefine the long name for this option
            not to disorient your users. It is also recommended not to define a short one.
            </summary>
        </member>
        <member name="M:CommandLine.HelpOptionAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpOptionAttribute"/> class
            with the specified short name. Use parameterless constructor instead.
            </summary>
            <param name="shortName">The short name of the option.</param>
        </member>
        <member name="M:CommandLine.HelpOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpOptionAttribute"/> class
            with the specified long name. Use parameterless constructor instead.
            </summary>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.HelpOptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpOptionAttribute"/> class.
            Allows you to define short and long option names.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="P:CommandLine.HelpOptionAttribute.Required">
            <summary>
            Returns always false for this kind of option.
            This behaviour can't be changed by design; if you try set <see cref="P:CommandLine.HelpOptionAttribute.Required"/>
            an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
        </member>
        <member name="T:CommandLine.OptionListAttribute">
            <summary>
            Models an option that can accept multiple values.
            Must be applied to a field compatible with an <see cref="T:System.Collections.Generic.IList`1"/> interface
            of <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:CommandLine.OptionListAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionListAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
        </member>
        <member name="M:CommandLine.OptionListAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionListAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.OptionListAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionListAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.OptionListAttribute.#ctor(System.Char,System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionListAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
            <param name="separator">Values separator character.</param>
        </member>
        <member name="P:CommandLine.OptionListAttribute.Separator">
            <summary>
            Gets or sets the values separator character.
            </summary>
        </member>
        <member name="T:CommandLine.ParserStateAttribute">
            <summary>
            Indicates that the property can receive an instance of type <see cref="T:CommandLine.IParserState"/>.
            </summary>
        </member>
        <member name="T:CommandLine.ValueListAttribute">
            <summary>
            Models a list of command line arguments that are not options.
            Must be applied to a field compatible with an <see cref="T:System.Collections.Generic.IList`1"/> interface
            of <see cref="T:System.String"/> instances.
            </summary>
            <remarks>To map individual values use instead <see cref="T:CommandLine.ValueOptionAttribute"/>.</remarks>
        </member>
        <member name="M:CommandLine.ValueListAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ValueListAttribute"/> class.
            </summary>
            <param name="concreteType">A type that implements <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="concreteType"/> is null.</exception>
        </member>
        <member name="P:CommandLine.ValueListAttribute.MaximumElements">
            <summary>
            Gets or sets the maximum element allow for the list managed by <see cref="T:CommandLine.ValueListAttribute"/> type.
            If lesser than 0, no upper bound is fixed.
            If equal to 0, no elements are allowed.
            </summary>
        </member>
        <member name="P:CommandLine.ValueListAttribute.ConcreteType">
            <summary>
            Gets the concrete type specified during initialization.
            </summary>
        </member>
        <member name="T:CommandLine.ValueOptionAttribute">
            <summary>
            Maps a single unnamed option to the target property. Values will be mapped in order of declaration.
            This attribute takes precedence over <see cref="T:CommandLine.ValueListAttribute"/> with which
            can coexist.
            </summary>
            <remarks>It can handle only scalar values. Do not apply to arrays or lists.</remarks>
        </member>
        <member name="T:CommandLine.Core.PropertyWriter">
            <summary>
            Encapsulates property writing primitives.
            </summary>
        </member>
        <member name="T:CommandLine.IHideObjectMembers">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/>  members from the fluent API to make it much cleaner 
            in Visual Studio intellisense.
            </summary>
            <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
        </member>
        <member name="M:CommandLine.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Hides the <see cref="M:CommandLine.IHideObjectMembers.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:CommandLine.IHideObjectMembers.GetHashCode">
            <summary>
            Hides the <see cref="M:CommandLine.IHideObjectMembers.GetHashCode"/> method.
            </summary>
        </member>
        <member name="M:CommandLine.IHideObjectMembers.GetType">
            <summary>
            Hides the <see cref="M:CommandLine.IHideObjectMembers.GetType"/> method.
            </summary>
        </member>
        <member name="M:CommandLine.IHideObjectMembers.ToString">
            <summary>
            Hides the <see cref="M:CommandLine.IHideObjectMembers.ToString"/> method.
            </summary>
        </member>
        <member name="T:CommandLine.ParserConfigurator">
            <summary>
            Provides an API for configuring a <see cref="T:CommandLine.IParser"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.ParserConfigurator.#ctor(CommandLine.IParser)">
            <summary>
            Initialize a new instance of <see cref="T:CommandLine.ParserConfigurator"/> class.
            </summary>
            <param name="parser">The <see cref="T:CommandLine.IParser"/> instance that should be configured.</param>
        </member>
        <member name="M:CommandLine.ParserConfigurator.NoCaseSensitive">
            <summary>
            Configures the parser to not be case sensitive.
            </summary>
            <returns>A reference to the current <see cref="T:CommandLine.ParserConfigurator"/>.</returns>
        </member>
        <member name="M:CommandLine.ParserConfigurator.HelpWriter(System.IO.TextWriter)">
            <summary>
            Configures the parser to use the provided instance of <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="helpWriter"></param>
            <returns>A reference to the current <see cref="T:CommandLine.ParserConfigurator"/>.</returns>
        </member>
        <member name="M:CommandLine.ParserConfigurator.EnableMutuallyExclusive">
            <summary>
            Enables the parser to handle mutually exclusive options.
            </summary>
            <returns>A reference to the current <see cref="T:CommandLine.ParserConfigurator"/>.</returns>
        </member>
        <member name="M:CommandLine.ParserConfigurator.IgnoreUnknownArguments">
            <summary>
            Enables the parser to handle unknown arguments for plug-in scenario.
            </summary>
            <returns>A reference to the current <see cref="T:CommandLine.ParserConfigurator"/>.</returns>
        </member>
        <member name="T:CommandLine.ParserContext">
            <summary>
            Models context in which parsing occurs.
            </summary>
        </member>
        <member name="T:CommandLine.Extensions.StringExtensions">
            <summary>
            Utility extension methods for strings and characters.
            </summary>
        </member>
        <member name="P:CommandLine.Helpers.ReflectionUtil.AssemblyFromWhichToPullInformation">
            <summary>
            Setter provided for testing purpose.
            </summary>
        </member>
        <member name="T:CommandLine.Core.ValueMapper">
            <summary>
            Maps unnamed options to property using <see cref="T:CommandLine.ValueOptionAttribute"/> and <see cref="T:CommandLine.ValueListAttribute"/>.
            </summary>
        </member>
        <member name="M:CommandLine.Core.ArgumentParser.InternalWrapperOfGetNextInputValues(CommandLine.Core.IArgumentEnumerator)">
            <summary>
            Helper method for testing purpose.
            </summary>>
        </member>
        <member name="M:CommandLine.Core.OptionInfo.#ctor(System.Nullable{System.Char},System.String)">
            <summary>
            Alternate constructor for testing purpose.
            </summary>
        </member>
        <member name="M:CommandLine.Core.OptionMap.#ctor(System.Int32,CommandLine.ParserSettings)">
            <summary>
            Constructor used for testing purpose.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HelpText">
            <summary>
            Models an help text and collects related informations.
            You can assign it in place of a <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.BaseSentenceBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class 
            specifying the sentence builder.
            </summary>
            <param name="sentenceBuilder">
            A <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading informations.
            </summary>
            <param name="heading">A string with heading information or
            an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="heading"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.BaseSentenceBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying the sentence builder and heading informations.
            </summary>
            <param name="sentenceBuilder">A <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading information or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright informations.
            </summary>
            <param name="heading">A string with heading information or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright information or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when one or more parameters <paramref name="heading"/> are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.BaseSentenceBuilder,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright informations.
            </summary>
            <param name="sentenceBuilder">A <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading information or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright information or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when one or more parameters <paramref name="heading"/> are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright informations.
            </summary>
            <param name="heading">A string with heading information or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright information or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <exception cref="T:System.ArgumentException">Thrown when one or more parameters <paramref name="heading"/> are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.BaseSentenceBuilder,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright informations.
            </summary>
            <param name="sentenceBuilder">A <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance.</param>
            <param name="heading">A string with heading information or an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright information or an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <exception cref="T:System.ArgumentException">Thrown when one or more parameters <paramref name="heading"/> are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild(System.Object,System.Action{CommandLine.Text.HelpText})">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="errDelegate">A delegate used to customize the text block for reporting parsing errors.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild(System.Object,System.Action{CommandLine.Text.HelpText},System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="errDelegate">A delegate used to customize the text block for reporting parsing errors.</param>
            <param name="verbsIndex">If true the output style is consistent with verb commands (no dashes), otherwise it outputs options.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.DefaultParsingErrorsHandler(System.Object,CommandLine.Text.HelpText)">
            <summary>
            Supplies a default parsing error handler implementation.
            </summary>
            <param name="options">The instance that collects parsed arguments parsed and associates <see cref="T:CommandLine.ParserStateAttribute"/>
            to a property of type <see cref="T:CommandLine.IParserState"/>.</param>
            <param name="current">The <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPreOptionsLine(System.String)">
            <summary>
            Adds a text line after copyright and before options usage informations.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPostOptionsLine(System.String)">
            <summary>
            Adds a text line at the bottom, after options usage informations.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions(System.Object)">
            <summary>
            Adds a text block with options usage informations.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.Parser"/> class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions(System.Object,System.String)">
            <summary>
            Adds a text block with options usage informations.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="requiredWord">The word to use when the option is required.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="requiredWord"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions(System.Object,System.String,System.Int32)">
            <summary>
            Adds a text block with options usage informations.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:CommandLine.Parser"/> class.</param>
            <param name="requiredWord">The word to use when the option is required.</param>
            <param name="maximumLength">The maximum length of the help documentation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="requiredWord"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderParsingErrorsText(System.Object,System.Int32)">
            <summary>
            Builds a string that contains a parsing error message.
            </summary>
            <param name="options">An options target instance that collects parsed arguments parsed with the <see cref="T:CommandLine.ParserStateAttribute"/>
            associated to a property of type <see cref="T:CommandLine.IParserState"/>.</param>
            <param name="indent">Number of spaces used to indent text.</param>
            <returns>The <see cref="T:System.String"/> that contains the parsing error message.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.ToString">
            <summary>
            Returns the help informations as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the help informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.op_Implicit(CommandLine.Text.HelpText)~System.String">
            <summary>
            Converts the help informations to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the help informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.OnFormatOptionHelpText(CommandLine.Text.FormatOptionHelpTextEventArgs)">
            <summary>
            The OnFormatOptionHelpText method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            </summary>
            <param name="e">Data for the <see cref="E:CommandLine.Text.HelpText.FormatOptionHelpText"/> event.</param>
        </member>
        <member name="E:CommandLine.Text.HelpText.FormatOptionHelpText">
            <summary>
            Occurs when an option help text is formatted.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.Heading">
            <summary>
            Sets the heading information string.
            You can directly assign a <see cref="T:CommandLine.Text.HeadingInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.Copyright">
            <summary>
            Sets the copyright information string.
            You can directly assign a <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.MaximumDisplayWidth">
            <summary>
            Gets or sets the maximum width of the display.  This determines word wrap when displaying the text.
            </summary>
            <value>The maximum width of the display.</value>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddDashesToOption">
            <summary>
            Gets or sets the format of options for adding or removing dashes.
            It modifies behavior of <see cref="M:CommandLine.Text.HelpText.AddOptions(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AdditionalNewLineAfterOption">
            <summary>
            Gets or sets whether to add an additional line after the description of the option.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.SentenceBuilder">
            <summary>
            Gets the <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance specified in constructor.
            </summary>
        </member>
        <member name="T:CommandLine.Text.BaseSentenceBuilder">
            <summary>
            Models an abstract sentence builder.
            </summary>
        </member>
        <member name="M:CommandLine.Text.BaseSentenceBuilder.CreateBuiltIn">
            <summary>
            Creates the built in sentence builder.
            </summary>
            <returns>The built in sentence builder.</returns>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.OptionWord">
            <summary>
            Gets a string containing word 'option'.
            </summary>
            <value>The word 'option'.</value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.AndWord">
            <summary>
            Gets a string containing the word 'and'.
            </summary>
            <value>The word 'and'.</value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.RequiredOptionMissingText">
            <summary>
            Gets a string containing the sentence 'required option missing'.
            </summary>
            <value>The sentence 'required option missing'.</value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.ViolatesFormatText">
            <summary>
            Gets a string containing the sentence 'violates format'.
            </summary>
            <value>The sentence 'violates format'.</value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.ViolatesMutualExclusivenessText">
            <summary>
            Gets a string containing the sentence 'violates mutual exclusiveness'.
            </summary>
            <value>The sentence 'violates mutual exclusiveness'.</value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.ErrorsHeadingText">
            <summary>
            Gets a string containing the error heading text.
            </summary>
            <value>The error heading text.</value>
        </member>
        <member name="T:CommandLine.Text.EnglishSentenceBuilder">
            <summary>
            Models an english sentence builder, currently the default one.
            </summary>
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.OptionWord">
            <summary>
            Gets a string containing word 'option' in english.
            </summary>
            <value>The word 'option' in english.</value>
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.AndWord">
            <summary>
            Gets a string containing the word 'and' in english.
            </summary>
            <value>The word 'and' in english.</value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.RequiredOptionMissingText">
            <summary>
            Gets a string containing the sentence 'required option missing' in english.
            </summary>
            <value>The sentence 'required option missing' in english.</value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.ViolatesFormatText">
            <summary>
            Gets a string containing the sentence 'violates format' in english.
            </summary>
            <value>The sentence 'violates format' in english.</value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.ViolatesMutualExclusivenessText">
            <summary>
            Gets a string containing the sentence 'violates mutual exclusiveness' in english.
            </summary>
            <value>The sentence 'violates mutual exclusiveness' in english.</value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.ErrorsHeadingText">
            <summary>
            Gets a string containing the error heading text in english.
            </summary>
            <value>The error heading text in english.</value>
        </member>
        <member name="T:CommandLine.Text.CopyrightInfo">
            <summary>
            Models the copyright informations part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Reflection.AssemblyCopyrightAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            with an assembly attribute, this overrides all formatting.
            </summary>
            <param name="attribute">The attribute which text to use.</param>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and year.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="year">The year of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and years.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The years of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Boolean,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying symbol case, author and years.
            </summary>
            <param name="isSymbolUpper">The case of the copyright symbol.</param>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The years of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.ToString">
            <summary>
            Returns the copyright informations as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the copyright informations.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.op_Implicit(CommandLine.Text.CopyrightInfo)~System.String">
            <summary>
            Converts the copyright informations to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the copyright informations.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.FormatYears(System.Int32[])">
            <summary>
            When overridden in a derived class, allows to specify a new algorithm to render copyright years
            as a <see cref="T:System.String"/> instance.
            </summary>
            <param name="years">A <see cref="T:System.Int32"/> array of years.</param>
            <returns>A <see cref="T:System.String"/> instance with copyright years.</returns>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.CopyrightWord">
            <summary>
            When overridden in a derived class, allows to specify a different copyright word.
            </summary>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.Default">
            <summary>
            The default copyright information.
            Retrieved from <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/>, if it exists,
            otherwise it uses <see cref="T:System.Reflection.AssemblyCompanyAttribute"/> as copyright holder with the current year.
            If neither exists it throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HeadingInfo">
            <summary>
            Models the heading informations part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name.
            </summary>
            <param name="programName">The name of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name and version.
            </summary>
            <param name="programName">The name of the program.</param>
            <param name="version">The version of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.ToString">
            <summary>
            Returns the heading informations as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the heading informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.op_Implicit(CommandLine.Text.HeadingInfo)~System.String">
            <summary>
            Converts the heading informations to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HeadingInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the heading informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String,System.IO.TextWriter)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <param name="writer">The target <see cref="T:System.IO.TextWriter"/> derived type.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard output stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteError(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard error stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="P:CommandLine.Text.HeadingInfo.Default">
            <summary>
            The default heading information.
            The title is retrieved from <see cref="T:System.Reflection.AssemblyTitleAttribute"/>,
            or the assembly short name if its not defined.
            The version is retrieved from <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>,
            or the assembly version if its not defined.
            </summary>
        </member>
        <member name="T:CommandLine.Text.MultilineTextAttribute">
            <summary>
            Provides base properties for creating an attribute, used to define multiple lines of text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> derived type
            using one line of text.
            </summary>
            <param name="line1">The first line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> derived type
            using two lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> derived type
            using three lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> derived type
            using four lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.MultilineTextAttribute"/> derived type
            using five lines of text.
            </summary>
            <param name="line1">The first line of text.</param>
            <param name="line2">The second line of text.</param>
            <param name="line3">The third line of text.</param>
            <param name="line4">The fourth line of text.</param>
            <param name="line5">The fifth line of text.</param>
        </member>
        <member name="M:CommandLine.Text.MultilineTextAttribute.GetLastLineWithText(System.String[])">
            <summary>
            Returns the last line with text. Preserves blank lines if user intended by skipping a line.
            </summary>
            <returns>The last index of line of the non-blank line.
            </returns>
            <param name='value'>The string array to process.</param>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Value">
            <summary>
            Returns all non-blank lines as string.
            </summary>
            <value>A string of all non-blank lines.</value>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line1">
            <summary>
            First line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line2">
            <summary>
            Second line of text
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line3">
            <summary>
            Third line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line4">
            <summary>
            Fourth line of text.
            </summary>
        </member>
        <member name="P:CommandLine.Text.MultilineTextAttribute.Line5">
            <summary>
            Fifth line of text.
            </summary>
        </member>
        <member name="T:CommandLine.Text.AssemblyLicenseAttribute">
            <summary>
            Models a multiline assembly license text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with one line of text.
            </summary>
            <param name="line1">First line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with two lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with three lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with four lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyLicenseAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyLicenseAttribute"/> class
            with five lines of text.
            </summary>
            <param name="line1">First line of license text.</param>
            <param name="line2">Second line of license text.</param>
            <param name="line3">Third line of license text.</param>
            <param name="line4">Fourth line of license text.</param>
            <param name="line5">Fifth line of license text.</param>
        </member>
        <member name="T:CommandLine.Text.AssemblyUsageAttribute">
            <summary>
            Models a multiline assembly usage text.
            </summary>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with one line of text.
            </summary>
            <param name="line1">First line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with two lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with three lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with four lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
        </member>
        <member name="M:CommandLine.Text.AssemblyUsageAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.AssemblyUsageAttribute"/> class
            with five lines of text.
            </summary>
            <param name="line1">First line of usage text.</param>
            <param name="line2">Second line of usage text.</param>
            <param name="line3">Third line of usage text.</param>
            <param name="line4">Fourth line of usage text.</param>
            <param name="line5">Fifth line of usage text.</param>
        </member>
        <member name="T:CommandLine.Text.FormatOptionHelpTextEventArgs">
            <summary>
            Provides data for the FormatOptionHelpText event.
            </summary>
        </member>
        <member name="M:CommandLine.Text.FormatOptionHelpTextEventArgs.#ctor(CommandLine.BaseOptionAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.FormatOptionHelpTextEventArgs"/> class.
            </summary>
            <param name="option">Option to format.</param>
        </member>
        <member name="P:CommandLine.Text.FormatOptionHelpTextEventArgs.Option">
            <summary>
            Gets the option to format.
            </summary>
        </member>
        <member name="T:CommandLine.HelpVerbOptionAttribute">
            <summary>
            Indicates the instance method that must be invoked when it becomes necessary show your help screen.
            The method signature is an instance method with that accepts and returns a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CommandLine.HelpVerbOptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpVerbOptionAttribute"/> class.
            Although it is possible, it is strongly discouraged redefine the long name for this option
            not to disorient your users.
            </summary>
        </member>
        <member name="M:CommandLine.HelpVerbOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpVerbOptionAttribute"/> class
            with the specified long name. Use parameterless constructor instead.
            </summary>
            <param name="longName"></param>
        </member>
        <member name="P:CommandLine.HelpVerbOptionAttribute.ShortName">
            <summary>
            Help verb command do not support short name by design.
            </summary>
        </member>
        <member name="P:CommandLine.HelpVerbOptionAttribute.Required">
            <summary>
            Help verb command like ordinary help option cannot be mandatory by design.
            </summary>
        </member>
        <member name="T:CommandLine.VerbOptionAttribute">
            <summary>
            Models a verb command specification.
            </summary>
        </member>
        <member name="M:CommandLine.VerbOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.VerbOptionAttribute"/> class.
            </summary>
            <param name="longName">The long name of the verb command.</param>
        </member>
        <member name="P:CommandLine.VerbOptionAttribute.ShortName">
            <summary>
            Verb commands do not support short name by design.
            </summary>
        </member>
        <member name="P:CommandLine.VerbOptionAttribute.Required">
            <summary>
            Verb commands cannot be mandatory since are mutually exclusive by design.
            </summary>
        </member>
        <member name="T:CommandLine.BadOptionInfo">
            <summary>
            Models a bad parsed option.
            </summary>
        </member>
        <member name="P:CommandLine.BadOptionInfo.ShortName">
            <summary>
            The short name of the option
            </summary>
            <value>Returns the short name of the option.</value>
        </member>
        <member name="P:CommandLine.BadOptionInfo.LongName">
            <summary>
            The long name of the option
            </summary>
            <value>Returns the long name of the option.</value>
        </member>
        <member name="T:CommandLine.Parser">
            <summary>
            Provides methods to parse command line arguments.
            Default implementation for <see cref="T:CommandLine.IParser"/>.
            </summary>
        </member>
        <member name="T:CommandLine.IParser">
            <summary>
            Defines a basic interface to parse command line arguments.
            </summary>
        </member>
        <member name="M:CommandLine.IParser.ParseArguments(System.String[],System.Object)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.IParser.ParseArguments(System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.         
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.IParser.ParseArgumentsStrict(System.String[],System.Object)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <see cref="F:CommandLine.Parser.DefaultExitCodeFail"/>.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.IParser.ParseArgumentsStrict(System.String[],System.Object,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <paramref name="exitCode"/>
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="exitCode">The exit code to use when quitting the application. It should be greater than zero.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.IParser.ParseArgumentsStrict(System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <see cref="F:CommandLine.Parser.DefaultExitCodeFail"/>.
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.IParser.ParseArguments(System.String[],System.Object,System.IO.TextWriter,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <paramref name="exitCode"/>
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <param name="exitCode">The exit code to use when quitting the application. It should be greater than zero.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.IParser.WasVerbOptionInvoked(System.String)">
            <summary>
            Determines if a particular verb option was invoked. This is a convenience helper method,
            do not refer to it to know if parsing occurred. If the verb command was invoked and the
            parser failed, it will return true.
            Use this method only in a verbs scenario, when parsing succeeded.
            </summary>
            <param name='verb'>Verb option to compare.</param>
            <returns>True if the specified verb option is the one invoked by the user.</returns>
        </member>
        <member name="P:CommandLine.IParser.Settings">
            <summary>
            Gets the instance of <see cref="T:CommandLine.ParserSettings"/> in use.
            </summary>
        </member>
        <member name="F:CommandLine.Parser.DefaultExitCodeFail">
            <summary>
            Default exit code (1) used by <see cref="M:CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object)"/>
            and <see cref="M:CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.IO.TextWriter)"/> overloads.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.#ctor(System.Action{CommandLine.ParserConfigurator})">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class.
            </summary>
            <param name="configuration">The configuration that should by used by the parser.</param>
        </member>
        <member name="M:CommandLine.Parser.#ctor(CommandLine.ParserSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Parser"/> class,
            configurable with a <see cref="T:CommandLine.ParserSettings"/> object.
            </summary>
            <param name="settings">The <see cref="T:CommandLine.ParserSettings"/> object is used to configure
            aspects and behaviors of the parser.</param>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments(System.String[],System.Object)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments(System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <returns>True if parsing process succeed</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Parser.GetVerbOptionsInstanceByName(System.String,System.Object,System.Boolean@)">
            <summary>
            This is an helper method designed to make the management of help for verb commands simple.
            Use the method within the main class instance for the management of verb commands.
            </summary>
            <param name="verb">Verb command string or null.</param>
            <param name="target">The main class instance for the management of verb commands.</param>
            <param name="found">true if <paramref name="verb"/> was found in <paramref name="target"/>.</param>
            <returns>The options instance for the verb command if <paramref name="found"/> is true, otherwise <paramref name="target"/>.</returns>
        </member>
        <member name="M:CommandLine.Parser.WasVerbOptionInvoked(System.String)">
            <summary>
            Determines if a particular verb option was invoked. This is a convenience helper method,
            do not refer to it to know if parsing occurred. If the verb command was invoked and the
            parser failed, it will return true.
            Use this method only in a verbs scenario, when parsing succeeded.
            </summary>
            <param name='verb'>Verb option to compare.</param>
            <returns>True if the specified verb option is the one invoked by the user.</returns>
        </member>
        <member name="M:CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <see cref="F:CommandLine.Parser.DefaultExitCodeFail"/>.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <paramref name="exitCode"/>
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="exitCode">The exit code to use when quitting the application. It should be greater than zero.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArgumentsStrict(System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <see cref="F:CommandLine.Parser.DefaultExitCodeFail"/>.
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Parser.ParseArguments(System.String[],System.Object,System.IO.TextWriter,System.Int32)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes. If parsing fails, the method terminates
            the process with <paramref name="exitCode"/>
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <param name="exitCode">The exit code to use when quitting the application. It should be greater than zero.</param>
            <returns>True if parsing process succeed, otherwise exits the application.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Parser.Dispose">
            <summary>
            Frees resources owned by the instance.
            </summary>
        </member>
        <member name="M:CommandLine.Parser.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="P:CommandLine.Parser.Default">
            <summary>
            Singleton instance created with basic defaults.
            </summary>
        </member>
        <member name="P:CommandLine.Parser.Settings">
            <summary>
            Gets the instance of <see cref="T:CommandLine.ParserSettings"/> in use.
            </summary>
        </member>
        <member name="T:CommandLine.ParserException">
            <summary>
            This exception is thrown when a generic parsing error occurs.
            </summary>
        </member>
        <member name="M:CommandLine.ParserException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CommandLine.ParserException"/>. The exception is thrown
            when something unexpected occurs during the parsing process.
            </summary>
        </member>
        <member name="M:CommandLine.ParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:CommandLine.ParserException"/>. The exception is thrown
            when something unexpected occurs during the parsing process.
            </summary>
            <param name="message">Error message string.</param>
        </member>
        <member name="M:CommandLine.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:CommandLine.ParserException"/>. The exception is thrown
            when something unexpected occurs during the parsing process.
            </summary>
            <param name="message">Error message string.</param>
            <param name="innerException">Inner exception reference.</param>
        </member>
        <member name="M:CommandLine.ParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:CommandLine.ParserException"/> with serialized data. The exception is thrown
            when something unexpected occurs during the parsing process.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:CommandLine.ParserSettings">
            <summary>
            Specifies a set of features to configure a <see cref="T:CommandLine.Parser"/> behavior.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class,
            setting the case comparison behavior.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class,
            setting the <see cref="T:System.IO.TextWriter"/> used for help method output.
            </summary>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor(System.Boolean,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class,
            setting case comparison and help output options.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class,
            setting case comparison and mutually exclusive behaviors.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor(System.Boolean,System.Boolean,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class,
            setting case comparison, mutually exclusive behavior and help output option.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.ParserSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ParserSettings"/> class,
            setting case comparison, mutually exclusive behavior and help output option.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
            <param name="ignoreUnknownArguments">If set to true, allow the parser to skip unknown argument, otherwise return a parse failure</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.ParserSettings.Dispose">
            <summary>
            Frees resources owned by the instance.
            </summary>
        </member>
        <member name="M:CommandLine.ParserSettings.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.CaseSensitive">
            <summary>
            Gets or sets the case comparison behavior.
            Default is set to true.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.MutuallyExclusive">
            <summary>
            Gets or sets the mutually exclusive behavior.
            Default is set to false.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.HelpWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> used for help method output.
            Setting this property to null, will disable help screen.
            </summary>
        </member>
        <member name="P:CommandLine.ParserSettings.IgnoreUnknownArguments">
            <summary>
            Gets or sets a value indicating if the parser shall move on to the next argument and ignore the given argument if it
            encounter an unknown arguments
            </summary>
            <value>
            <c>true</c> to allow parsing the arguments with differents class options that do not have all the arguments.
            </value>
            <remarks>
            This allows fragmented version class parsing, useful for project with addon where addons also requires command line arguments but
            when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="T:CommandLine.IParserState">
            <summary>
            Represents the parser state.
            </summary>
        </member>
        <member name="P:CommandLine.IParserState.Errors">
            <summary>
            Errors occurred during parsing.
            </summary>
        </member>
        <member name="T:CommandLine.ParserState">
            <summary>
            Models a type that records the parser state afeter parsing.
            </summary>
        </member>
        <member name="P:CommandLine.ParserState.Errors">
            <summary>
            Gets a list of parsing errors.
            </summary>
            <value>
            Parsing errors.
            </value>
        </member>
        <member name="T:CommandLine.ParsingError">
            <summary>
            Models a parsing error.
            </summary>
        </member>
        <member name="P:CommandLine.ParsingError.BadOption">
            <summary>
            Gets or a the bad parsed option.
            </summary>
            <value>
            The bad option.
            </value>
        </member>
        <member name="P:CommandLine.ParsingError.ViolatesRequired">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommandLine.ParsingError"/> violates required.
            </summary>
            <value>
            <c>true</c> if violates required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommandLine.ParsingError.ViolatesFormat">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommandLine.ParsingError"/> violates format.
            </summary>
            <value>
            <c>true</c> if violates format; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommandLine.ParsingError.ViolatesMutualExclusiveness">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommandLine.ParsingError"/> violates mutual exclusiveness.
            </summary>
            <value>
            <c>true</c> if violates mutual exclusiveness; otherwise, <c>false</c>.
            </value>
        </member>
    </members>
</doc>
